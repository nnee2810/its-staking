// Generated by @wagmi/cli@1.3.0 on 31/7/2023 at 14:43:24
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StakingContract
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stakingContractABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'when',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakedERC20',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'when',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakedERC721',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'when',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UnstakedERC20',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'when',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UnstakedERC721',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'when',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawalERC20',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'when',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawalERC721',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'acceptedNFT',
    outputs: [{ name: '', internalType: 'contract IERC721', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'acceptedToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'cooldownPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_who', internalType: 'address', type: 'address' }],
    name: 'getPendingERC721Withdrawals',
    outputs: [
      {
        name: '',
        internalType: 'struct Staking.PendingERC721Withdrawal[]',
        type: 'tuple[]',
        components: [
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
          { name: 'applicableAt', internalType: 'uint128', type: 'uint128' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_who', internalType: 'address', type: 'address' }],
    name: 'getnftStakings',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_acceptedNFT',
        internalType: 'contract IERC721',
        type: 'address',
      },
      {
        name: '_acceptedToken',
        internalType: 'contract IERC20',
        type: 'address',
      },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxNftStaking',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nftStakings',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'pendingERC20Withdrawals',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'applicableAt', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pendingERC721Withdrawals',
    outputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'applicableAt', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_cooldownPeriod', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCooldownPeriod',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_maxNftStaking', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaxNftStaking',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'stakeERC20',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'stakeERC721',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'stakeMultipleERC721',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'staking',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'unstakeERC20',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'unstakeERC721',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'unstakeMultipleERC721',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdrawERC20',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawERC721',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'withdrawMultipleERC721',
    outputs: [],
  },
] as const

export const stakingContractAddress =
  '0xebE5F4ED7ceD336A82aA107c27346CFCC5385fd7' as const

export const stakingContractConfig = {
  address: stakingContractAddress,
  abi: stakingContractABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TokenContract
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tokenContractABI = [
  {
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'initialBalance', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NftContract
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const nftContractABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractABI}__.
 */
export function useStakingContractRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stakingContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: stakingContractABI,
    address: stakingContractAddress,
    ...config,
  } as UseContractReadConfig<
    typeof stakingContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"acceptedNFT"`.
 */
export function useStakingContractAcceptedNft<
  TFunctionName extends 'acceptedNFT',
  TSelectData = ReadContractResult<typeof stakingContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'acceptedNFT',
    ...config,
  } as UseContractReadConfig<
    typeof stakingContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"acceptedToken"`.
 */
export function useStakingContractAcceptedToken<
  TFunctionName extends 'acceptedToken',
  TSelectData = ReadContractResult<typeof stakingContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'acceptedToken',
    ...config,
  } as UseContractReadConfig<
    typeof stakingContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"cooldownPeriod"`.
 */
export function useStakingContractCooldownPeriod<
  TFunctionName extends 'cooldownPeriod',
  TSelectData = ReadContractResult<typeof stakingContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'cooldownPeriod',
    ...config,
  } as UseContractReadConfig<
    typeof stakingContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"getPendingERC721Withdrawals"`.
 */
export function useStakingContractGetPendingErc721Withdrawals<
  TFunctionName extends 'getPendingERC721Withdrawals',
  TSelectData = ReadContractResult<typeof stakingContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'getPendingERC721Withdrawals',
    ...config,
  } as UseContractReadConfig<
    typeof stakingContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"getnftStakings"`.
 */
export function useStakingContractGetnftStakings<
  TFunctionName extends 'getnftStakings',
  TSelectData = ReadContractResult<typeof stakingContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'getnftStakings',
    ...config,
  } as UseContractReadConfig<
    typeof stakingContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"maxNftStaking"`.
 */
export function useStakingContractMaxNftStaking<
  TFunctionName extends 'maxNftStaking',
  TSelectData = ReadContractResult<typeof stakingContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'maxNftStaking',
    ...config,
  } as UseContractReadConfig<
    typeof stakingContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"nftStakings"`.
 */
export function useStakingContractNftStakings<
  TFunctionName extends 'nftStakings',
  TSelectData = ReadContractResult<typeof stakingContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'nftStakings',
    ...config,
  } as UseContractReadConfig<
    typeof stakingContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useStakingContractOnErc721Received<
  TFunctionName extends 'onERC721Received',
  TSelectData = ReadContractResult<typeof stakingContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'onERC721Received',
    ...config,
  } as UseContractReadConfig<
    typeof stakingContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"owner"`.
 */
export function useStakingContractOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof stakingContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof stakingContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"pendingERC20Withdrawals"`.
 */
export function useStakingContractPendingErc20Withdrawals<
  TFunctionName extends 'pendingERC20Withdrawals',
  TSelectData = ReadContractResult<typeof stakingContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'pendingERC20Withdrawals',
    ...config,
  } as UseContractReadConfig<
    typeof stakingContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"pendingERC721Withdrawals"`.
 */
export function useStakingContractPendingErc721Withdrawals<
  TFunctionName extends 'pendingERC721Withdrawals',
  TSelectData = ReadContractResult<typeof stakingContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'pendingERC721Withdrawals',
    ...config,
  } as UseContractReadConfig<
    typeof stakingContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"staking"`.
 */
export function useStakingContractStaking<
  TFunctionName extends 'staking',
  TSelectData = ReadContractResult<typeof stakingContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'staking',
    ...config,
  } as UseContractReadConfig<
    typeof stakingContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractABI}__.
 */
export function useStakingContractWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakingContractABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof stakingContractABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof stakingContractABI, TFunctionName, TMode>({
    abi: stakingContractABI,
    address: stakingContractAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"initialize"`.
 */
export function useStakingContractInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakingContractABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof stakingContractABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof stakingContractABI, 'initialize', TMode>({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useStakingContractRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakingContractABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof stakingContractABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof stakingContractABI,
    'renounceOwnership',
    TMode
  >({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"setCooldownPeriod"`.
 */
export function useStakingContractSetCooldownPeriod<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakingContractABI,
          'setCooldownPeriod'
        >['request']['abi'],
        'setCooldownPeriod',
        TMode
      > & { functionName?: 'setCooldownPeriod' }
    : UseContractWriteConfig<
        typeof stakingContractABI,
        'setCooldownPeriod',
        TMode
      > & {
        abi?: never
        functionName?: 'setCooldownPeriod'
      } = {} as any,
) {
  return useContractWrite<
    typeof stakingContractABI,
    'setCooldownPeriod',
    TMode
  >({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'setCooldownPeriod',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"setMaxNftStaking"`.
 */
export function useStakingContractSetMaxNftStaking<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakingContractABI,
          'setMaxNftStaking'
        >['request']['abi'],
        'setMaxNftStaking',
        TMode
      > & { functionName?: 'setMaxNftStaking' }
    : UseContractWriteConfig<
        typeof stakingContractABI,
        'setMaxNftStaking',
        TMode
      > & {
        abi?: never
        functionName?: 'setMaxNftStaking'
      } = {} as any,
) {
  return useContractWrite<typeof stakingContractABI, 'setMaxNftStaking', TMode>(
    {
      abi: stakingContractABI,
      address: stakingContractAddress,
      functionName: 'setMaxNftStaking',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"stakeERC20"`.
 */
export function useStakingContractStakeErc20<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakingContractABI,
          'stakeERC20'
        >['request']['abi'],
        'stakeERC20',
        TMode
      > & { functionName?: 'stakeERC20' }
    : UseContractWriteConfig<typeof stakingContractABI, 'stakeERC20', TMode> & {
        abi?: never
        functionName?: 'stakeERC20'
      } = {} as any,
) {
  return useContractWrite<typeof stakingContractABI, 'stakeERC20', TMode>({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'stakeERC20',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"stakeERC721"`.
 */
export function useStakingContractStakeErc721<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakingContractABI,
          'stakeERC721'
        >['request']['abi'],
        'stakeERC721',
        TMode
      > & { functionName?: 'stakeERC721' }
    : UseContractWriteConfig<
        typeof stakingContractABI,
        'stakeERC721',
        TMode
      > & {
        abi?: never
        functionName?: 'stakeERC721'
      } = {} as any,
) {
  return useContractWrite<typeof stakingContractABI, 'stakeERC721', TMode>({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'stakeERC721',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"stakeMultipleERC721"`.
 */
export function useStakingContractStakeMultipleErc721<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakingContractABI,
          'stakeMultipleERC721'
        >['request']['abi'],
        'stakeMultipleERC721',
        TMode
      > & { functionName?: 'stakeMultipleERC721' }
    : UseContractWriteConfig<
        typeof stakingContractABI,
        'stakeMultipleERC721',
        TMode
      > & {
        abi?: never
        functionName?: 'stakeMultipleERC721'
      } = {} as any,
) {
  return useContractWrite<
    typeof stakingContractABI,
    'stakeMultipleERC721',
    TMode
  >({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'stakeMultipleERC721',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useStakingContractTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakingContractABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof stakingContractABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof stakingContractABI,
    'transferOwnership',
    TMode
  >({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"unstakeERC20"`.
 */
export function useStakingContractUnstakeErc20<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakingContractABI,
          'unstakeERC20'
        >['request']['abi'],
        'unstakeERC20',
        TMode
      > & { functionName?: 'unstakeERC20' }
    : UseContractWriteConfig<
        typeof stakingContractABI,
        'unstakeERC20',
        TMode
      > & {
        abi?: never
        functionName?: 'unstakeERC20'
      } = {} as any,
) {
  return useContractWrite<typeof stakingContractABI, 'unstakeERC20', TMode>({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'unstakeERC20',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"unstakeERC721"`.
 */
export function useStakingContractUnstakeErc721<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakingContractABI,
          'unstakeERC721'
        >['request']['abi'],
        'unstakeERC721',
        TMode
      > & { functionName?: 'unstakeERC721' }
    : UseContractWriteConfig<
        typeof stakingContractABI,
        'unstakeERC721',
        TMode
      > & {
        abi?: never
        functionName?: 'unstakeERC721'
      } = {} as any,
) {
  return useContractWrite<typeof stakingContractABI, 'unstakeERC721', TMode>({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'unstakeERC721',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"unstakeMultipleERC721"`.
 */
export function useStakingContractUnstakeMultipleErc721<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakingContractABI,
          'unstakeMultipleERC721'
        >['request']['abi'],
        'unstakeMultipleERC721',
        TMode
      > & { functionName?: 'unstakeMultipleERC721' }
    : UseContractWriteConfig<
        typeof stakingContractABI,
        'unstakeMultipleERC721',
        TMode
      > & {
        abi?: never
        functionName?: 'unstakeMultipleERC721'
      } = {} as any,
) {
  return useContractWrite<
    typeof stakingContractABI,
    'unstakeMultipleERC721',
    TMode
  >({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'unstakeMultipleERC721',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"withdrawERC20"`.
 */
export function useStakingContractWithdrawErc20<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakingContractABI,
          'withdrawERC20'
        >['request']['abi'],
        'withdrawERC20',
        TMode
      > & { functionName?: 'withdrawERC20' }
    : UseContractWriteConfig<
        typeof stakingContractABI,
        'withdrawERC20',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawERC20'
      } = {} as any,
) {
  return useContractWrite<typeof stakingContractABI, 'withdrawERC20', TMode>({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'withdrawERC20',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"withdrawERC721"`.
 */
export function useStakingContractWithdrawErc721<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakingContractABI,
          'withdrawERC721'
        >['request']['abi'],
        'withdrawERC721',
        TMode
      > & { functionName?: 'withdrawERC721' }
    : UseContractWriteConfig<
        typeof stakingContractABI,
        'withdrawERC721',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawERC721'
      } = {} as any,
) {
  return useContractWrite<typeof stakingContractABI, 'withdrawERC721', TMode>({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'withdrawERC721',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"withdrawMultipleERC721"`.
 */
export function useStakingContractWithdrawMultipleErc721<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakingContractABI,
          'withdrawMultipleERC721'
        >['request']['abi'],
        'withdrawMultipleERC721',
        TMode
      > & { functionName?: 'withdrawMultipleERC721' }
    : UseContractWriteConfig<
        typeof stakingContractABI,
        'withdrawMultipleERC721',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawMultipleERC721'
      } = {} as any,
) {
  return useContractWrite<
    typeof stakingContractABI,
    'withdrawMultipleERC721',
    TMode
  >({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'withdrawMultipleERC721',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractABI}__.
 */
export function usePrepareStakingContractWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakingContractABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakingContractABI,
    address: stakingContractAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareStakingContractInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakingContractABI, 'initialize'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareStakingContractRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractABI,
      'renounceOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stakingContractABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"setCooldownPeriod"`.
 */
export function usePrepareStakingContractSetCooldownPeriod(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractABI,
      'setCooldownPeriod'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'setCooldownPeriod',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stakingContractABI,
    'setCooldownPeriod'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"setMaxNftStaking"`.
 */
export function usePrepareStakingContractSetMaxNftStaking(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractABI,
      'setMaxNftStaking'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'setMaxNftStaking',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stakingContractABI,
    'setMaxNftStaking'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"stakeERC20"`.
 */
export function usePrepareStakingContractStakeErc20(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakingContractABI, 'stakeERC20'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'stakeERC20',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractABI, 'stakeERC20'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"stakeERC721"`.
 */
export function usePrepareStakingContractStakeErc721(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakingContractABI, 'stakeERC721'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'stakeERC721',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractABI, 'stakeERC721'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"stakeMultipleERC721"`.
 */
export function usePrepareStakingContractStakeMultipleErc721(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractABI,
      'stakeMultipleERC721'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'stakeMultipleERC721',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stakingContractABI,
    'stakeMultipleERC721'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareStakingContractTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractABI,
      'transferOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stakingContractABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"unstakeERC20"`.
 */
export function usePrepareStakingContractUnstakeErc20(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakingContractABI, 'unstakeERC20'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'unstakeERC20',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractABI, 'unstakeERC20'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"unstakeERC721"`.
 */
export function usePrepareStakingContractUnstakeErc721(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakingContractABI, 'unstakeERC721'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'unstakeERC721',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stakingContractABI,
    'unstakeERC721'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"unstakeMultipleERC721"`.
 */
export function usePrepareStakingContractUnstakeMultipleErc721(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractABI,
      'unstakeMultipleERC721'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'unstakeMultipleERC721',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stakingContractABI,
    'unstakeMultipleERC721'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"withdrawERC20"`.
 */
export function usePrepareStakingContractWithdrawErc20(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakingContractABI, 'withdrawERC20'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'withdrawERC20',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stakingContractABI,
    'withdrawERC20'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"withdrawERC721"`.
 */
export function usePrepareStakingContractWithdrawErc721(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakingContractABI, 'withdrawERC721'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'withdrawERC721',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stakingContractABI,
    'withdrawERC721'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractABI}__ and `functionName` set to `"withdrawMultipleERC721"`.
 */
export function usePrepareStakingContractWithdrawMultipleErc721(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractABI,
      'withdrawMultipleERC721'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakingContractABI,
    address: stakingContractAddress,
    functionName: 'withdrawMultipleERC721',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stakingContractABI,
    'withdrawMultipleERC721'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractABI}__.
 */
export function useStakingContractEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof stakingContractABI, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: stakingContractABI,
    address: stakingContractAddress,
    ...config,
  } as UseContractEventConfig<typeof stakingContractABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractABI}__ and `eventName` set to `"Initialized"`.
 */
export function useStakingContractInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakingContractABI, 'Initialized'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stakingContractABI,
    address: stakingContractAddress,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof stakingContractABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useStakingContractOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof stakingContractABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stakingContractABI,
    address: stakingContractAddress,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof stakingContractABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractABI}__ and `eventName` set to `"StakedERC20"`.
 */
export function useStakingContractStakedErc20Event(
  config: Omit<
    UseContractEventConfig<typeof stakingContractABI, 'StakedERC20'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stakingContractABI,
    address: stakingContractAddress,
    eventName: 'StakedERC20',
    ...config,
  } as UseContractEventConfig<typeof stakingContractABI, 'StakedERC20'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractABI}__ and `eventName` set to `"StakedERC721"`.
 */
export function useStakingContractStakedErc721Event(
  config: Omit<
    UseContractEventConfig<typeof stakingContractABI, 'StakedERC721'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stakingContractABI,
    address: stakingContractAddress,
    eventName: 'StakedERC721',
    ...config,
  } as UseContractEventConfig<typeof stakingContractABI, 'StakedERC721'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractABI}__ and `eventName` set to `"UnstakedERC20"`.
 */
export function useStakingContractUnstakedErc20Event(
  config: Omit<
    UseContractEventConfig<typeof stakingContractABI, 'UnstakedERC20'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stakingContractABI,
    address: stakingContractAddress,
    eventName: 'UnstakedERC20',
    ...config,
  } as UseContractEventConfig<typeof stakingContractABI, 'UnstakedERC20'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractABI}__ and `eventName` set to `"UnstakedERC721"`.
 */
export function useStakingContractUnstakedErc721Event(
  config: Omit<
    UseContractEventConfig<typeof stakingContractABI, 'UnstakedERC721'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stakingContractABI,
    address: stakingContractAddress,
    eventName: 'UnstakedERC721',
    ...config,
  } as UseContractEventConfig<typeof stakingContractABI, 'UnstakedERC721'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractABI}__ and `eventName` set to `"WithdrawalERC20"`.
 */
export function useStakingContractWithdrawalErc20Event(
  config: Omit<
    UseContractEventConfig<typeof stakingContractABI, 'WithdrawalERC20'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stakingContractABI,
    address: stakingContractAddress,
    eventName: 'WithdrawalERC20',
    ...config,
  } as UseContractEventConfig<typeof stakingContractABI, 'WithdrawalERC20'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractABI}__ and `eventName` set to `"WithdrawalERC721"`.
 */
export function useStakingContractWithdrawalErc721Event(
  config: Omit<
    UseContractEventConfig<typeof stakingContractABI, 'WithdrawalERC721'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stakingContractABI,
    address: stakingContractAddress,
    eventName: 'WithdrawalERC721',
    ...config,
  } as UseContractEventConfig<typeof stakingContractABI, 'WithdrawalERC721'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenContractABI}__.
 */
export function useTokenContractRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tokenContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenContractABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenContractABI,
    ...config,
  } as UseContractReadConfig<
    typeof tokenContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"allowance"`.
 */
export function useTokenContractAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof tokenContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenContractABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof tokenContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useTokenContractBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof tokenContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenContractABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof tokenContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"decimals"`.
 */
export function useTokenContractDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof tokenContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenContractABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof tokenContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"name"`.
 */
export function useTokenContractName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof tokenContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenContractABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof tokenContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"symbol"`.
 */
export function useTokenContractSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof tokenContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenContractABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof tokenContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useTokenContractTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof tokenContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenContractABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof tokenContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenContractABI}__.
 */
export function useTokenContractWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tokenContractABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof tokenContractABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof tokenContractABI, TFunctionName, TMode>({
    abi: tokenContractABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"approve"`.
 */
export function useTokenContractApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tokenContractABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof tokenContractABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof tokenContractABI, 'approve', TMode>({
    abi: tokenContractABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useTokenContractDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tokenContractABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof tokenContractABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof tokenContractABI, 'decreaseAllowance', TMode>({
    abi: tokenContractABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useTokenContractIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tokenContractABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof tokenContractABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof tokenContractABI, 'increaseAllowance', TMode>({
    abi: tokenContractABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"mint"`.
 */
export function useTokenContractMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tokenContractABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof tokenContractABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof tokenContractABI, 'mint', TMode>({
    abi: tokenContractABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"transfer"`.
 */
export function useTokenContractTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tokenContractABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof tokenContractABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof tokenContractABI, 'transfer', TMode>({
    abi: tokenContractABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useTokenContractTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tokenContractABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof tokenContractABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof tokenContractABI, 'transferFrom', TMode>({
    abi: tokenContractABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenContractABI}__.
 */
export function usePrepareTokenContractWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenContractABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenContractABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenContractABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareTokenContractApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenContractABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenContractABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenContractABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareTokenContractDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenContractABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenContractABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tokenContractABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareTokenContractIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenContractABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenContractABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tokenContractABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareTokenContractMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenContractABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenContractABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenContractABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareTokenContractTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenContractABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenContractABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenContractABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenContractABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareTokenContractTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenContractABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenContractABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenContractABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenContractABI}__.
 */
export function useTokenContractEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof tokenContractABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: tokenContractABI,
    ...config,
  } as UseContractEventConfig<typeof tokenContractABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenContractABI}__ and `eventName` set to `"Approval"`.
 */
export function useTokenContractApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenContractABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tokenContractABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof tokenContractABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenContractABI}__ and `eventName` set to `"Transfer"`.
 */
export function useTokenContractTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenContractABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tokenContractABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof tokenContractABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftContractABI}__.
 */
export function useNftContractRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof nftContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: nftContractABI,
    ...config,
  } as UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useNftContractBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof nftContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nftContractABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"getApproved"`.
 */
export function useNftContractGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof nftContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nftContractABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useNftContractIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof nftContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nftContractABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"name"`.
 */
export function useNftContractName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof nftContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nftContractABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"owner"`.
 */
export function useNftContractOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof nftContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nftContractABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useNftContractOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof nftContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nftContractABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useNftContractSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof nftContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nftContractABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"symbol"`.
 */
export function useNftContractSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof nftContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nftContractABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useNftContractTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof nftContractABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nftContractABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof nftContractABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftContractABI}__.
 */
export function useNftContractWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nftContractABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof nftContractABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof nftContractABI, TFunctionName, TMode>({
    abi: nftContractABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"approve"`.
 */
export function useNftContractApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nftContractABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof nftContractABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof nftContractABI, 'approve', TMode>({
    abi: nftContractABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useNftContractRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nftContractABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof nftContractABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof nftContractABI, 'renounceOwnership', TMode>({
    abi: nftContractABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"safeMint"`.
 */
export function useNftContractSafeMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nftContractABI,
          'safeMint'
        >['request']['abi'],
        'safeMint',
        TMode
      > & { functionName?: 'safeMint' }
    : UseContractWriteConfig<typeof nftContractABI, 'safeMint', TMode> & {
        abi?: never
        functionName?: 'safeMint'
      } = {} as any,
) {
  return useContractWrite<typeof nftContractABI, 'safeMint', TMode>({
    abi: nftContractABI,
    functionName: 'safeMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useNftContractSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nftContractABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof nftContractABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof nftContractABI, 'safeTransferFrom', TMode>({
    abi: nftContractABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useNftContractSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nftContractABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof nftContractABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof nftContractABI, 'setApprovalForAll', TMode>({
    abi: nftContractABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useNftContractTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nftContractABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof nftContractABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof nftContractABI, 'transferFrom', TMode>({
    abi: nftContractABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useNftContractTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nftContractABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof nftContractABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof nftContractABI, 'transferOwnership', TMode>({
    abi: nftContractABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftContractABI}__.
 */
export function usePrepareNftContractWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftContractABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nftContractABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftContractABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareNftContractApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftContractABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nftContractABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftContractABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareNftContractRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftContractABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nftContractABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nftContractABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"safeMint"`.
 */
export function usePrepareNftContractSafeMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftContractABI, 'safeMint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nftContractABI,
    functionName: 'safeMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftContractABI, 'safeMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareNftContractSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftContractABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nftContractABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftContractABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareNftContractSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftContractABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nftContractABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nftContractABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareNftContractTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftContractABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nftContractABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftContractABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftContractABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareNftContractTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftContractABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nftContractABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nftContractABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nftContractABI}__.
 */
export function useNftContractEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof nftContractABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: nftContractABI,
    ...config,
  } as UseContractEventConfig<typeof nftContractABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nftContractABI}__ and `eventName` set to `"Approval"`.
 */
export function useNftContractApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof nftContractABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: nftContractABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof nftContractABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nftContractABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useNftContractApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof nftContractABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: nftContractABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof nftContractABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nftContractABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useNftContractOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof nftContractABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: nftContractABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof nftContractABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nftContractABI}__ and `eventName` set to `"Transfer"`.
 */
export function useNftContractTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof nftContractABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: nftContractABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof nftContractABI, 'Transfer'>)
}
